const { exec } = require('child_process');

const express = require('express')
const app = express()
const port = 4000;
var AdmZip = require('adm-zip');
const { CloudFunctionsServiceClient } = require('@google-cloud/functions');

// end routes
app.listen(port, () => {
  console.log(`Example app listening at http://localhost:${port}`)
})

var cors = require('cors');
app.use(cors())

app.get('/testAuth', async (req, res) => {

  // Imports the Google Cloud client library.

  // Instantiates a client. If you don't specify credentials when constructing
  // the client, the client library will look for credentials in the
  // environment.
  // Makes an authenticated API request.
  try {
    res.send('hello govna')
    // const { Storage } = require('@google-cloud/storage');

    // const storage = new Storage();

    // const results = await storage.getBuckets();

    // const [buckets] = results;

    // console.log('Buckets:');
    // buckets.forEach(bucket => {
    //   console.log(bucket.name);
    // });
    // res.send("you're authenticated !!!")

  } catch (err) {
    console.error('ERROR:', err);
    res.send(error)

  }

})

app.get('/generate', async (req, res) => {

  // res.setHeader('Content-Type', 'application/json; application/octet-stream')
  // res.setHeader('Content-Disposition', 'attachment;filename=generate.zip')

  let errorStep = '0'

  try {
    //   console.log('step', errorStep)
    await exec('java -jar openapi-generator-cli.jar generate \
    -i petstore.yaml \
    -g nodejs-express-server \
    -o tmp/petstore', (error, stdout, stderr) => {
      // console.log(`stdout: ${stdout}`);
      // console.error(`stderr: ${stderr}`);

      //     errorStep = '1'
      //     console.log('step', errorStep)



      // code gen part

      const newCode = `

    const listPets = ({ limit }) => new Promise( async (resolve, reject) => { try { 
    // start changes
    var admin = require('firebase-admin');
    admin.initializeApp({
      credential: admin.credential.applicationDefault(),
      databaseURL: "https://api-builder-71719.firebaseio.com",
    });
    const db = admin.firestore();
    let pets = await db.collection('pets').get()
    let petArray = []
    pets.forEach(pet => {
      petArray.push(pet.data())

    })
    return resolve(petArray)
    // end changes 
    resolve(Service.successResponse({
      limit,
    }));
  } catch (e) {
    reject(Service.rejectResponse(
      e.message || 'Invalid input',
      e.status || 405,
    ));
  }
},
);

    `



      const myPackages = `
    
    {
      "name": "swagger-petstore",
      "version": "1.0.0",
      "description": "No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)",
      "main": "index.js",
      "scripts": {
        "prestart": "npm install",
        "start": "node index.js"
      },
      "keywords": [
        "openapi-generator",
        "openapi"
      ],
      "license": "Unlicense",
      "private": true,
      "dependencies": {
        "body-parser": "^1.19.0",
        "camelcase": "^5.3.1",
        "cookie-parser": "^1.4.4",
        "cors": "^2.8.5",
        "express": "^4.16.4",
        "express-openapi-validator": "^3.9.1",
        "firebase-admin": "^9.4.1",
        "js-yaml": "^3.3.0",
        "ono": "^5.0.1",
        "openapi-sampler": "^1.0.0-beta.15",
        "swagger-ui-express": "^4.0.2",
        "winston": "^3.2.1"
      },
      "devDependencies": {
        "axios": "^0.19.0",
        "chai": "^4.2.0",
        "chai-as-promised": "^7.1.1",
        "eslint": "^5.16.0",
        "eslint-config-airbnb-base": "^14.0.0",
        "eslint-plugin-import": "^2.17.2",
        "mocha": "^7.1.1"
      },
      "eslintConfig": {
        "env": {
          "node": true
        }
      }
    }
    
    
    `
      const minifier = require('string-minify');

      var fs = require('fs')

      let data = fs.readFileSync('tmp/petstore/services/PetsService.js', 'utf-8');
      let start = 537;
      let substitute = '  HELLO   '
      let end = 829
      let result = data.substring(0, start) + newCode + data.substring(end);

      fs.writeFileSync('tmp/petstore/services/PetsService.js', result, 'utf-8');

      fs.writeFileSync('tmp/petstore/package.json', myPackages, 'utf-8');








      // // creating archives
      // var zip = new AdmZip();
      // zip.addLocalFolder('tmp/petstore');
      // // or write everything to disk
      // errorStep = '2'
      // console.log('step', errorStep)

      // zip.writeZip("tmp/output.zip");
      // errorStep = '3'
      // console.log('step', errorStep)

      // let zipFileContents = zip.toBuffer();
      // const fileName = 'generate.zip';
      // const fileType = 'application/zip';
      // res.writeHead(200, {
      //   'Content-Disposition': `attachment; filename="${fileName}"`,
      //   'Content-Type': fileType,
      // })

      // errorStep = '4'
      // console.log('step', errorStep)
      // if (error) {
      //   res.send(error)

      // }
      return res.end('zipFileContents');
    })



  } catch (error) {

    res.send('there was an error: ' + errorStep + ' ' + error)

  }





});

app.get('/', (req, res) => {

  res.send('API Generator Running....')



});


app.get('/list', async (req, res) => {


  try {
    // Imports the Google Cloud client library

    // remove this line after package is released
    // eslint-disable-next-line node/no-missing-require
    const { CloudFunctionsServiceClient } = require('@google-cloud/functions');

    // TODO(developer): replace with your prefered project ID.
    const projectId = 'senior-design-293721'

    // Creates a client
    const client = new CloudFunctionsServiceClient();
    const project = 'projects/senior-design-293721/locations/us-central1'; // Get the functions for a project.
    const page_size = 100; //Max number of functions to return per call
    const page_token = 'token';
    // const project = 'senior-design-293721/*/locations/*'; // Get the functions for a project.


    const [functions] = await client.listFunctions({
      parent: project,
      pageSize: page_size,
      pageToken: page_token,
    });
    console.info('functions: ', functions);

    // create cloud function

    // client.createFunction({
    //   name: 'newFunction',
    //   so

    // })

    // export GOOGLE_APPLICATION_CREDENTIALS="/Users/marcusgallegos/Senior Design-18c4109462fd.json"   

    res.send('Sucessfully Listed Functions, check your console!');


  } catch (error) {
    console.log('error: ', error)
    res.send(error);

  }

});

app.get('/generateUploadUrl', async (req, res) => {
  const { CloudFunctionsServiceClient } = require('@google-cloud/functions');

  const client = new CloudFunctionsServiceClient();

  let request = {
    parent: 'projects/senior-design-293721/locations/us-central1'
  }

  const [response] = await client.generateUploadUrl(request);

  console.log('response', response.uploadUrl)
  // res.send(response)

  var axios = require('axios');
  var FormData = require('form-data');
  var fs = require('fs');
  var data = new FormData();
  data.append('File', fs.createReadStream('/Users/marcusgallegos/Downloads/function-source (1).zip'));

  var config = {
    method: 'put',
    url: response.uploadUrl,
    headers: {
      ...data.getHeaders(),
      'content-type': 'application/zip',
      'x-goog-content-length-range': '0,104857600',
    },
    data: data
  };

  axios(config)
    .then(function (response) {
      // console.log(JSON.stringify(response.data));
      res.send(response)
    })
    .catch(function (error) {
      // console.log(error);
      res.send(error)
    });


});




app.get('/upload', async (req, res) => {
  const location = 'projects/senior-design-293721/locations/us-central1';


  try {

    const client = new CloudFunctionsServiceClient();
    let myFunction = {
      "name": "projects/senior-design-293721/locations/us-central1/functions/helloWord",
      "sourceUploadUrl": "https://storage.googleapis.com/gcf-upload-us-central1-06164526-5e4b-41ba-98e5-7c2d9a3e7260/4320182d-ea72-4c4a-bfb3-06ecd70ba4b5.zip?GoogleAccessId=service-824226399055@gcf-admin-robot.iam.gserviceaccount.com&Expires=1606527088&Signature=SO%2BSMHRh1iIzyhqQdP4ZA5X4jK5GzAwAVP5ZU%2BaIN1C20Fj3DpwXWY%2BsvVxgQe1m3JlhKu0egfC2mhueUL1j%2BkobjqLRdikg7A6daU0f0tJEUiP6wSZPbmm6zv2Rv9mJXC4inwbR3WwomUHbo%2ByXNJ9F7mHzFDSetJ9rJ5pvkCRbzkPJ%2FLDMgipMz7m7JxDxkQCb8l2l1bkef6zEsoS3DPgTrxKhwuW614ztDzuwenpXeTI295Yo9KusZMvj8juEBfyXszMe3SVFfGRVEOcC8SyQcpkBOtLoU01a1s2oOu5Jr1S%2BpamClKwmIWkfa1NdFVAAGG%2BloP4mhoRP85Ae3g%3D%3D",
      "description": "test",
      "maxInstances": 1000,
      "timeout": "300s",
      "entryPoint": "",
      "httpsTrigger": {},
      "labels": {},
      "network": "",
      "runtime": "nodejs10",
      "serviceAccountEmail": "",
      "vpcConnector": ""
    }



    let request = {
      location: location,
      function: myFunction

    }
    const [operation] = await client.createFunction(request);
    const [response] = await operation.promise();

    res.send('Sucessfully Uploaded', response);


  } catch (error) {
    console.log('error: ', error)
    res.send(error);

  }

});

module.exports = {
  app
};